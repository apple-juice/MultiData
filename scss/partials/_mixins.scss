@mixin css3-prefix($property, $value) {
	-webkit-#{$property}: #{$value};
	-moz-#{$property}: #{$value};
	-ms-#{$property}: #{$value};
	#{$property}: #{$value};
}

@mixin background-gradient($startColor: #3C3C3C, $endColor: #999999) {
	background-color: $startColor;
	background-image: -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor));
	background-image: -webkit-linear-gradient(top, $startColor, $endColor);
	background-image:    -moz-linear-gradient(top, $startColor, $endColor);
	background-image:     -ms-linear-gradient(top, $startColor, $endColor);
	background-image:      -o-linear-gradient(top, $startColor, $endColor);
	background-image:         linear-gradient(top, $startColor, $endColor);
	filter:            progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}', endColorStr='#{$endColor}');
}

@mixin background-horizontal($startColor: #3C3C3C, $endColor: #999999) {
	background-color: $startColor;
	background-image: -webkit-gradient(linear, left top, right top, from($startColor), to($endColor));
	background-image: -webkit-linear-gradient(left, $startColor, $endColor);
	background-image:    -moz-linear-gradient(left, $startColor, $endColor);
	background-image:     -ms-linear-gradient(left, $startColor, $endColor);
	background-image:      -o-linear-gradient(left, $startColor, $endColor);
	background-image:         linear-gradient(left, $startColor, $endColor);
	filter:            progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}', endColorStr='#{$endColor}', gradientType='1');
}

@mixin background-radial($startColor: #FFFFFF, $startPos: 0%, $endColor: #000000, $endPos:100%) {
	background: -moz-radial-gradient(center, ellipse cover, $startColor $startPos, $endColor $endPos);
	background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop($startPos,$startColor), color-stop($endPos,$endColor));
	background: -webkit-radial-gradient(center, ellipse cover, $startColor $startPos,$endColor $endPos);
	background: -o-radial-gradient(center, ellipse cover, $startColor $startPos,$endColor $endPos);
	background: -ms-radial-gradient(center, ellipse cover, $startColor $startPos,$endColor $endPos);
	background: radial-gradient(ellipse at center, $startColor $startPos,$endColor $endPos);
}

@mixin background-size($arg...) {
	@if type-of($arg) == 'number' and $arg != null {
		@include css3-prefix('background-size', $arg $arg);
	} @else {
		@include css3-prefix('background-size', $arg);
	}
}

@mixin background-opacity($color: #000, $opacity: 0.85) {
	background: $color;
	background: rgba($color, $opacity);
}

@mixin border-radius($radius: 5px) {
	@include css3-prefix('border-radius', $radius);
}

@mixin border-radius-separate($topLeftRadius: 5px, $topRightRadius: 5px, $bottomLeftRadius: 5px, $bottomRightRadius: 5px) {
	-webkit-border-top-left-radius:     $topLeftRadius;
	-webkit-border-top-right-radius:    $topRightRadius;
	-webkit-border-bottom-right-radius: $bottomRightRadius;
	-webkit-border-bottom-left-radius:  $bottomLeftRadius;

	-moz-border-radius-topleft:     $topLeftRadius;
	-moz-border-radius-topright:    $topRightRadius;
	-moz-border-radius-bottomright: $bottomRightRadius;
	-moz-border-radius-bottomleft:  $bottomLeftRadius;

	border-top-left-radius:     $topLeftRadius;
	border-top-right-radius:    $topRightRadius;
	border-bottom-right-radius: $bottomRightRadius;
	border-bottom-left-radius:  $bottomLeftRadius;
}

@mixin box($orient: horizontal, $pack: center, $align: center) {
	display: -webkit-box;
	display: -moz-box;
	display: box;

	@include css3-prefix('box-orient', $orient);
	@include css3-prefix('box-pack', $pack);
	@include css3-prefix('box-align', $align);
}

@mixin box-rgba($r: 60, $g: 3, $b: 12, $opacity: 0.23, $color: #3C3C3C) {
	background-color: transparent;
	background-color: rgba($r, $g, $b, $opacity);
	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$color}',endColorstr='#{$color}');
	zoom:   1;
}


@mixin box-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4), $inset: "") {
	@if ($inset != "") {
		@include css3-prefix('box-shadow', $inset $x $y $blur $color);
	} @else {
		@include css3-prefix('box-shadow', $x $y $blur $color);
	}
}

@mixin box-shadow-none($arg...) {
	@include css3-prefix('box-shadow',$arg);
}

@mixin box-sizing($type: border-box) {
	@include css3-prefix('box-sizing', $type);
}

@mixin columns($count: 3, $gap: 10) {
	@include css3-prefix('column-count', $count);
	@include css3-prefix('column-gap', $gap);
}

@mixin double-borders($colorOne: #3C3C3C, $colorTwo: #999999, $radius: 0) {
	border: 1px solid $colorOne;

	@include css3-prefix('box-shadow', 0 0 0 1px $colorTwo);

	@include border-radius( $radius );
}

@mixin flex($value: 1) {
	@include css3-prefix('box-flex', $value);
}

@mixin flip($scaleX: -1) {
	@include css3-prefix('transform', scaleX($scaleX));
	filter:            FlipH;
	-ms-filter:        "FlipH";
}

@mixin scale($scale) {
	@include css3-prefix('transform', scale($scale));
}

@mixin font-face($fontFamily: myFont, $eotFileSrc: 'myFont.eot', $woffFileSrc: 'myFont.woff', $ttfFileSrc: 'myFont.ttf') {
	font-family: $fontFamily;
	src: url($eotFileSrc)  format('eot'),
	url($woffFileSrc) format('woff'),
	url($ttfFileSrc)  format('truetype');
}

@mixin opacity($opacity: 0.5) {
	$opacityMultiplied: ($opacity * 100);

	filter:         alpha(opacity=$opacityMultiplied);
	-ms-filter:     "progid:DXImageTransform.Microsoft.Alpha(Opacity=" + $opacityMultiplied + ")";
	@include css3-prefix('opacity', $opacity);
}


@mixin outline-radius($radius: 5px) {
	@include css3-prefix('outline-radius', $radius);
}

@mixin resize($direction: both) {
	@include css3-prefix('resize', $direction);
}


@mixin rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) {
	@include css3-prefix('transform', rotate($deg + deg));
	filter: progid:DXImageTransform.Microsoft.Matrix(
					M11=#{$m11}, M12=#{$m12}, M21=#{$m21}, M22=#{$m22}, sizingMethod='auto expand');
	zoom: 1;
}


@mixin text-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4)) {
	text-shadow: $x $y $blur $color;
}


@mixin transform($params) {
	@include css3-prefix('transform', $params);
}


@mixin transform-style($style: preserve-3d) {
	@include css3-prefix('transform-style', $style);
}


@mixin transition($properties...) {

	@if length($properties) >= 1 {
		@include css3-prefix('transition', $properties);
	}

	@else {
		@include css3-prefix('transition', $what: all, $length: 1s, $easing: ease-in-out);
	}
}


@mixin triple-borders($colorOne: #3C3C3C, $colorTwo: #999999, $colorThree: #000000, $radius: 0) {
	border: 1px solid $colorOne;

	@include border-radius($radius);

	@include css3-prefix('box-shadow', 0 0 0 1px $colorTwo, 0 0 0 2px $colorThree);
}


@mixin keyframes($animation-name) {
	@-webkit-keyframes #{$animation-name} {
		@content;
	}
	@-moz-keyframes #{$animation-name} {
		@content;
	}
	@-ms-keyframes #{$animation-name} {
		@content;
	}
	@-o-keyframes #{$animation-name} {
		@content;
	}
	@keyframes #{$animation-name} {
		@content;
	}
}


@mixin animation($str) {
	@include css3-prefix('animation', $str);
}

@mixin clearfix{
	&:after, &:before{ content:""; display:table; clear:both; }
}

@mixin placeholder {
	&::-webkit-input-placeholder {@content}
	&:-moz-placeholder           {@content}
	&::-moz-placeholder          {@content}
	&:-ms-input-placeholder      {@content}
}

@mixin appearance {
	-webkit-appearance: none;
	-moz-appearance: none;
	appearance: none;
}

@mixin image-2x($image, $width, $height) {
	@media (min--moz-device-pixel-ratio: 1.3),
	(-o-min-device-pixel-ratio: 2.6/2),
	(-webkit-min-device-pixel-ratio: 1.3),
	(min-device-pixel-ratio: 1.3),
	(min-resolution: 1.3dppx) {
		/* on retina, use image that's scaled by 2 */
		background-image: url($image);
		background-size: $width $height;
	}
}


//====================================================//
// ==================== REM MIXIN ====================//
//====================================================//

$rem-baseline: 16px !default;
$rem-fallback: true !default;
$rem-px-only: false !default;

@function rem-separator($list) {
	@if function-exists("list-separator") == true {
		@return list-separator($list);
	}

	$test-list: ();
	@each $item in $list {
		$test-list: append($test-list, $item, space);
	}

	@return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
	font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
	$result: ();
	$separator: rem-separator($values);

	@each $value in $values {
		@if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
			$result: append($result, $value / 1rem * $rem-baseline, $separator);
		} @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
			$result: append($result, $value / ($rem-baseline / 1rem), $separator);
		} @else if type-of($value) == "list" {
			$result: append($result, rem-convert($to, $value...), $separator);
		} @else {
			$result: append($result, $value, $separator);
		}
	}

	@return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
	@if $rem-px-only {
		@return rem-convert(px, $values...);
	} @else {
		@return rem-convert(rem, $values...);
	}
}

@mixin rem($properties, $values...) {
	@if type-of($properties) == "map" {
		@each $property in map-keys($properties) {
			@include rem($property, map-get($properties, $property));
		}
	} @else {
		@each $property in $properties {
			@if $rem-fallback or $rem-px-only {
				#{$property}: rem-convert(px, $values...);
			}
			@if not $rem-px-only {
				#{$property}: rem-convert(rem, $values...);
			}
		}
	}
}

@function em-separator($list) {
	@if function-exists("list-separator") == true {
		@return list-separator($list);
	}

	$test-list: ();
	@each $item in $list {
		$test-list: append($test-list, $item, space);
	}

	@return if($test-list == $list, space, comma);
}

@mixin em-baseline($zoom: 100%) {
	font-size: $zoom / 16px * $rem-baseline;
}


@function em-convert($to, $values...) {
	$result: ();
	$separator: em-separator($values);

	@each $value in $values {
		@if type-of($value) == "number" and unit($value) == "em" and $to == "px" {
			$result: append($result, $value / 1em * $rem-baseline, $separator);
		} @else if type-of($value) == "number" and unit($value) == "px" and $to == "em" {
			$result: append($result, $value / ($rem-baseline / 1em), $separator);
		} @else if type-of($value) == "list" {
			$result: append($result, em-convert($to, $value...), $separator);
		} @else {
			$result: append($result, $value, $separator);
		}
	}

	@return if(length($result) == 1, nth($result, 1), $result);
}

@function em($values...) {
	@if $rem-px-only {
		@return em-convert(px, $values...);
	} @else {
		@return em-convert(em, $values...);
	}
}

@mixin em($properties, $values...) {
	@if type-of($properties) == "map" {
		@each $property in map-keys($properties) {
			@include em($property, map-get($properties, $property));
		}
	} @else {
		@each $property in $properties {
			@if $rem-fallback or $rem-px-only {
				#{$property}: em-convert(px, $values...);
			}
			@if not $rem-px-only {
				#{$property}: em-convert(em, $values...);
			}
		}
	}
}

@mixin animation-duration($str) {
	@include css3-prefix('animation-duration', $str);
}

@mixin animation($str) {
	@include css3-prefix('animation', $str);
}

@mixin animation-name($str) {
	@include css3-prefix('animation-name', $str);
}

%noselect {
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	-o-user-select: none;
	user-select: none;
}

%wordbreak {
	word-break: break-all;
	word-break: break-word;
}